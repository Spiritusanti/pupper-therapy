{"version":3,"sources":["components/header-component/header.component.jsx","components/image-card/image-card.component.jsx","components/image-grid/image-grid.component.jsx","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","className","ImageCard","image","src","alt","width","ImageGrid","images","map","i","key","App","useState","setImages","useEffect","fetch","then","response","json","data","message","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"4SAiBeA,G,MAXS,WAEpB,OACI,yBAAKC,UAAU,UACX,8CACA,iHCAGC,G,MARG,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAChB,OACI,yBAAKF,UAAU,cACX,yBAAKG,IAAKD,EAAOE,IAAI,MAAMC,MAAM,WCc9BC,G,MAhBG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAChB,OACI,yBAAKP,UAAU,cACVO,EACIA,EAAOC,KAAI,SAACN,EAAOO,GAChB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLP,MAAOA,OAGjB,gBCYCS,G,MArBH,WAAO,IAAD,EACYC,qBADZ,mBACTL,EADS,KACDM,EADC,KAWd,OARFC,qBAAU,WACiBC,MAAM,8CAC9BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,EAAUM,EAAKC,cAG5B,CAACP,IAGA,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAiBqB,SAAS,KAC1B,yBAAKrB,UAAU,gBACb,kBAAC,EAAD,CAAWO,OAAQA,QCTTe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlB,c","file":"static/js/main.379fd399.chunk.js","sourcesContent":["import React from 'react';\r\n// import SearchBar from '../searchbar-component/searchbar.component.jsx';\r\nimport './header.styles.css';\r\n\r\n\r\n\r\nconst HeaderComponent = () => {\r\n\r\n    return (\r\n        <div className='header'>\r\n            <h1>Pupper therapy</h1>\r\n            <p>Welcome to Pupper Therapy. A page full of dogs to distract from the day to day.</p>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HeaderComponent;","import React from 'react';\r\nimport './image-card.styles.css';\r\n\r\nconst ImageCard = ({image}) => {\r\n    return(\r\n        <div className='image-card'>\r\n            <img src={image} alt=\"dog\" width=\"450\"></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCard;","import React from 'react';\r\nimport ImageCard from '../image-card/image-card.component';\r\nimport './image-grid.styles.css';\r\n\r\nconst ImageGrid = ({images}) => {\r\n    return (\r\n        <div className='image-grid'>\r\n            {images\r\n               ? images.map((image, i) => {\r\n                    return (\r\n                        <ImageCard\r\n                        key={i}\r\n                        image={image}\r\n                    />)\r\n                })\r\n            : \"loading...\"}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageGrid;","import React, { useEffect, useState } from 'react';\nimport HeaderComponent from './components/header-component/header.component';\nimport ImageGrid from './components/image-grid/image-grid.component';\nimport './App.css';\n// `https://dog.ceo/api/breed/${query}/image/random/25`\n\nconst App = () => {\n  const [images, setImages] = useState();\n\n  useEffect(() => {\n    const fetchFunc = () => {fetch('https://dog.ceo/api/breeds/image/random/50')\n    .then(response => response.json())\n    .then(data => setImages(data.message))\n    }\n    fetchFunc();\n  }, [setImages]);\n    \n    return ( \n      <div className='app'>\n        <HeaderComponent onChange='' />\n        <div className='grid-wrapper'>\n          <ImageGrid images={images}/>\n        </div>\n      </div>\n    )\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}